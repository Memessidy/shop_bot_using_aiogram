from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import orm_add_product, orm_get_products, orm_delete_product, orm_get_product, \
    orm_update_product
from filters.chat_types import ChatTypeFilter, IsAdmin
from kbds.inline import get_callback_btns
from kbds.reply import get_keyboard

admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())

ADMIN_KB = get_keyboard(
    "–î–æ–±–∞–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä",
    "–ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç",
    placeholder="–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ",
    sizes=(2,)
)


# –ö–æ–¥ –¥–ª—è –º–∞—à–∏–Ω–∏ —Å—Ç–∞–Ω—ñ–≤ (FSM)

class AddProduct(StatesGroup):
    # –ö—Ä–æ–∫–∏ —Å—Ç–∞–Ω—ñ–≤
    name = State()
    description = State()
    price = State()
    image = State()

    product_for_change = None

    texts = {
        'AddProduct:name': '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É:',
        'AddProduct:description': '–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å:',
        'AddProduct:price': '–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å:',
        'AddProduct:image': '–û—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–µ–π—Ç! ...',
    }


@admin_router.message(Command("admin"))
async def admin_features(message: types.Message):
    await message.answer("–©–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?", reply_markup=ADMIN_KB)


@admin_router.message(F.text == "–ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")
async def starring_at_product(message: types.Message, session: AsyncSession):
    await message.answer("–û–ö, –æ—Å—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤: üõí")
    for product in await orm_get_products(session):
        await message.answer_photo(
            product.image,
            caption=f"<strong>{product.name}</strong>\n"
                    f"{product.description}\n"
                    f"–¶—ñ–Ω–∞: {round(product.price, 2)}",
            reply_markup=get_callback_btns(btns={
                '–í–∏–¥–∞–ª–∏—Ç–∏': f'delete_{product.id}',
                '–ó–º—ñ–Ω–∏—Ç–∏': f'change_{product.id}',
            }))


@admin_router.callback_query(F.data.startswith("delete_"))
async def delete_product(callback: types.CallbackQuery, session: AsyncSession):
    product_id = callback.data.split("_")[-1]
    await orm_delete_product(session, int(product_id))

    await callback.answer("–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ!")
    await callback.message.answer("–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ!")


@admin_router.callback_query(StateFilter(None), F.data.startswith("change_"))
async def delete_product_callback(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    product_id = callback.data.split("_")[-1]
    product_for_change = await orm_get_product(session, int(product_id))

    AddProduct.product_for_change = product_for_change
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddProduct.name)


# –°—Ç–∞–≤–∏–º–æ—Å—å —É —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è name
@admin_router.message(StateFilter(None), F.text == "–î–æ–±–∞–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä")
async def add_product(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AddProduct.name)


# –•–µ–Ω–¥–ª–µ—Ä —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–≤–∂–¥–∏ –±—É—Ç–∏ —Å–∞–º–µ —Ç—É—Ç,
# –ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –º–∏ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–π—à–ª–∏ –≤ —Å—Ç–∞–Ω –Ω–æ–º–µ—Ä 1 (–ø–µ—Ä—à–æ—á–µ—Ä–≥–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤)
@admin_router.message(StateFilter('*'), Command("—Å–∫–∞—Å—É–≤–∞—Ç–∏"))
@admin_router.message(StateFilter('*'), F.text.casefold() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    if AddProduct.product_for_change:
        AddProduct.product_for_change = None

    await state.clear()
    await message.answer("–î—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω—ñ", reply_markup=ADMIN_KB)


# –í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–Ω–∞ –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@admin_router.message(StateFilter('*'), Command("–Ω–∞–∑–∞–¥"))
@admin_router.message(StateFilter('*'), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_step_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()

    if current_state == AddProduct.name:
        await message.answer('–ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É –Ω–µ —ñ—Å–Ω—É—î, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å "—Å–∫–∞—Å—É–≤–∞—Ç–∏"')
        return

    previous = None
    for step in AddProduct.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f"–î–æ–±—Ä–µ, –≤–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É \n {AddProduct.texts[previous.state]}")
            return
        previous = step


# –ú–∏ –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–∞–Ω—É name, –∞ –ø–æ—Ç—ñ–º –∑–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω –Ω–∞ description
@admin_router.message(AddProduct.name, or_f(F.text, F.text == '.'))
async def add_name(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(name=AddProduct.product_for_change.name)
    else:
        if len(message.text) >= 100:
            await message.answer("–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 100 —Å–∏–º–≤–æ–ª—ñ–≤. \n –í–≤–µ–¥—ñ—Ç—å –∑–Ω–æ–≤—É.")
            return

        await state.update_data(name=message.text)
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É")
    await state.set_state(AddProduct.description)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏—Ö –≤–≤–µ–¥–µ–Ω—å –¥–ª—è —Å—Ç–∞–Ω—É name
@admin_router.message(AddProduct.name)
async def add_name2(message: types.Message, state: FSMContext):
    await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ –¥–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—É")


# –ú–∏ –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–∞–Ω—É description, –∞ –ø–æ—Ç—ñ–º –∑–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω –Ω–∞ price
@admin_router.message(AddProduct.description, or_f(F.text, F.text == '.'))
async def add_description(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(name=AddProduct.product_for_change.description)
    else:
        await state.update_data(description=message.text)
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É")
    await state.set_state(AddProduct.price)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏—Ö –≤–≤–µ–¥–µ–Ω—å –¥–ª—è —Å—Ç–∞–Ω—É description
@admin_router.message(AddProduct.description)
async def add_description2(message: types.Message, state: FSMContext):
    await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ –¥–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –æ–ø–∏—Å—É —Ç–æ–≤–∞—Ä—É")


# –ú–∏ –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–∞–Ω—É —Ü—ñ–Ω–∏ (price), –∞ –ø–æ—Ç—ñ–º –∑–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (image)
@admin_router.message(AddProduct.price, or_f(F.text, F.text == '.'))
async def add_price(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(price=AddProduct.product_for_change.price)
    else:
        try:
            float(message.text)
        except ValueError:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–Ω–∏")
            return

        await state.update_data(price=message.text)
    await message.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É")
    await state.set_state(AddProduct.image)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è —Å—Ç–∞–Ω—É —Ü—ñ–Ω–∏ (price).
@admin_router.message(AddProduct.price)
async def add_price2(message: types.Message, state: FSMContext):
    await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ –¥–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—à—Ç–æ–≤–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É")


# –ú–∏ –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–∞–Ω—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (image), –∞ –ø–æ—Ç—ñ–º –≤–∏—Ö–æ–¥–∏–º–æ –∑ FSM
@admin_router.message(AddProduct.image, or_f(F.photo, F.text == '.'))
async def add_image(message: types.Message, state: FSMContext, session: AsyncSession):

    if message.text and message.text == '.':
        await state.update_data(image=AddProduct.product_for_change.image)
    else:
        await state.update_data(image=message.photo[-1].file_id)

    data = await state.get_data()
    try:
        if AddProduct.product_for_change:
            await orm_update_product(session, AddProduct.product_for_change.id, data)
        else:
            await orm_add_product(session, data)
        await message.answer("–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ", reply_markup=ADMIN_KB)
        await state.clear()
    except Exception as e:
        await message.answer(f"–ó–Ω–∞–π–¥–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}!", reply_markup=ADMIN_KB)
        await state.clear()
    AddProduct.product_for_change = None


@admin_router.message(AddProduct.image)
async def add_image2(message: types.Message, state: FSMContext):
    await message.answer("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ")
